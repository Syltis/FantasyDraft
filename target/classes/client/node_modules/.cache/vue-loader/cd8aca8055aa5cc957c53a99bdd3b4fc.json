{"remainingRequest":"/home/knut/code/lotion-webdraft/src/main/resources/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/knut/code/lotion-webdraft/src/main/resources/client/src/components/Game.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/knut/code/lotion-webdraft/src/main/resources/client/src/components/Game.vue","mtime":1548532238747},{"path":"/home/knut/code/lotion-webdraft/src/main/resources/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/knut/code/lotion-webdraft/src/main/resources/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/knut/code/lotion-webdraft/src/main/resources/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/knut/code/lotion-webdraft/src/main/resources/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\";\n\nexport default {\n    name: \"websocketdemo\",\n    data() {\n        return {\n            received_messages: [],\n            send_message: null,\n            connected: false,\n            players: []\n        };\n    },\n    methods: {\n        send() {\n            console.log(\"Send message:\" + this.send_message);\n            if (this.stompClient && this.stompClient.connected) {\n                const msg = { name: this.send_message };\n                this.stompClient.send(\"/app/join\", JSON.stringify(msg), {});\n            }\n        },\n        connect() {\n            this.socket = new SockJS(\"http://localhost:8080/gs-guide-websocket\");\n            this.stompClient = Stomp.over(this.socket);\n            this.stompClient.connect(\n                {},\n                frame => {\n                    this.connected = true;\n                    console.log(frame);\n                    this.stompClient.subscribe(\"/fantasy/players/\", tick => {\n                        console.log(tick);\n                        console.log(\"Dette: \" + tick.body);\n                    this.players = JSON.parse(tick.body)['playerList'];\n                    });\n                },\n                error => {\n                    console.log(error);\n                    this.connected = false;\n                }\n            );\n        },\n        disconnect() {\n            if (this.stompClient) {\n                this.stompClient.disconnect();\n                this.players = [    ]\n            }\n            this.connected = false;\n        },\n        tickleConnection() {\n            this.connected ? this.disconnect() : this.connect();\n        }\n    },\n    mounted() {\n        // this.connect();\n    }\n};\n",{"version":3,"sources":["Game.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Game.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <button id=\"connect\" class=\"btn btn-default\" type=\"submit\" :disabled=\"connected == true\" @click.prevent=\"connect\">Connect</button>\n        <button id=\"disconnect\" class=\"btn btn-default\" type=\"submit\" :disabled=\"connected == false\" @click.prevent=\"disconnect\">Disconnect</button>\n        <button v-on:click=\"send\">Send</button>\n        <input type=\"text\" v-model=\"send_message\"/>\n    </div>\n    <div class=\"players-section\">\n        <p v-for=\"player in players\"> {{ player.name }} </p>\n    </div>\n</template>\n\n<script>\n    import SockJS from \"sockjs-client\";\n    import Stomp from \"webstomp-client\";\n\n    export default {\n        name: \"websocketdemo\",\n        data() {\n            return {\n                received_messages: [],\n                send_message: null,\n                connected: false,\n                players: []\n            };\n        },\n        methods: {\n            send() {\n                console.log(\"Send message:\" + this.send_message);\n                if (this.stompClient && this.stompClient.connected) {\n                    const msg = { name: this.send_message };\n                    this.stompClient.send(\"/app/join\", JSON.stringify(msg), {});\n                }\n            },\n            connect() {\n                this.socket = new SockJS(\"http://localhost:8080/gs-guide-websocket\");\n                this.stompClient = Stomp.over(this.socket);\n                this.stompClient.connect(\n                    {},\n                    frame => {\n                        this.connected = true;\n                        console.log(frame);\n                        this.stompClient.subscribe(\"/fantasy/players/\", tick => {\n                            console.log(tick);\n                            console.log(\"Dette: \" + tick.body);\n                        this.players = JSON.parse(tick.body)['playerList'];\n                        });\n                    },\n                    error => {\n                        console.log(error);\n                        this.connected = false;\n                    }\n                );\n            },\n            disconnect() {\n                if (this.stompClient) {\n                    this.stompClient.disconnect();\n                    this.players = [    ]\n                }\n                this.connected = false;\n            },\n            tickleConnection() {\n                this.connected ? this.disconnect() : this.connect();\n            }\n        },\n        mounted() {\n            // this.connect();\n        }\n    };\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n</style>\n"]}]}